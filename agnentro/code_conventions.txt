CODE CONVENTIONS
----------------
Code should adhere to the following rules to the extent realistically possible:

* Variable declarations must appear in alphabetical order. Attempting to optimize otherwise tends to result in chaos with trivial incremental performance benefits over compiler optimization.

* Codeflow within a function, at the same curly brace nesting level, and between macro or function invokations, should generally proceed as follows: (1) read everything required, (2) update state, then (3) write everything required. This ordering is of course superceded by the need for code correctness. Subordinate to the ordering rule is alphabetization: if it just doesn't matter, than sort statements ascending alphabetically. This is a straightforward way to canonize codeflow decisions which don't matter for most practical purposes, and are generally overridden by compiler optimization anyway.

* All constant left shift operands (but not shift counts) must be designated as unsigned, either "U" or "ULL", as appropriate. ("UL" is int sized and thus ill defined.)

* All function headers must consist of a summary, input requirements ("In"), return value description, and output promises ("Out"). Variables not mentioned in Out imply that they are unchanged.
* The state of the variable controlling the number of iterations in a "for" loop must be regarded as undefined following loop completion or breakage because although it is technically defined, verification may be spotty on account of rare exploitation of such definition, and such reliance may produce subtle bugs.

* Except in cases where optimization is paramount, loops must be written as "do... while" rather than "for" because the latter often prompts the compiler to perform loop unrolling which is excessive. Furthermore "for" loops can become infinite loops in cases where an entire power-of-2 space is swept.

* Data structures in custom types and structs must be arranged descending by granularity (not to be confused with size) then ascending alphabetically. This is done to maximize proper alignment and minimize the number of page translations required for access.

* Comparisons must always be "<" instead of ">" and "<=" instead of ">=". Where possible, comparisons against constants must be constructed so as to choose the least possible constant in the interest of more uniform code, e.g. "if(a<=0x7F)" instead of "if(a<0x80)".

* Macros other than TYPEDEF_START() and TYPEDEF_END() must be defined such that they require a terminating semicolon, i.e. the last line of the macro must omit a semicolon.

* Practice security through fragility, as ironic as that may sound. For example: use "if(x==9)" instead of "if(x<=9)" if the former is sufficient; no "default" clause must exist in switch() statements where none is required and no acceleration could result; "while" statements should be as presumptive (nonredundant) as possible; "&" or "|" should be used instead of "&&" or "||" where possible. Such practices go against the grain of convention, but are intended to expose rather than hide bugs, and often result in performance improvement. Code which is barely correct is easier to verify than code which goes out of its way to tolerate invalid states, allowing them to remain undetected until they cause more havoc much later.

* All comments must be multiline. As with the code itself, column limits should not be maintained. Let everyone choose whatever form of word wrap best suits them.

* "x_max", "x_max_max", "x_min", and "x_min_min" refer to the maximum, upper bound, minimum, and lower bounds of x, respectively. The upper and lower bounds are loose, i.e. potentially unreachable, whereas the other values refer to limits already reached or expected to be reached.

* Functions and their parameters must appear in alphabetical order by name. There is little optimization to be gained, but a lot of time to be wasted, by trying to optimize their order according to some elaborate set of rules intended to be, but invariably never ending up as, intuitive.

* In structure or type definitions, items with larger granularity must appear before those with smaller granularity. (For this purpose, a 123-byte string of individual bytes would be considered to have byte granularity, not 123-byte granularity.) Otherwise definitions must follow alphabetical order. Pointers and (ULONG)s must appear after those with 64-bit granularity but before those with 32-bit granularity.

* Variable names ending in decimal digits mean either (1) to include the digit as part of the name itself, e.g. "x_plus_5" meaning "x+5" or (2) the Nth instance of the variable, e.g. "x_plus5" meaning "the sixth instance of x_plus". The cases are distinguished by the presence or absence of an underscore immediately preceding the integer. Furthermore, in the latter case, the decimal digits corresponding to the instance number must always appear as a suffix, and not in the middle of the name. In the rare case where both situations apply, an "i" must precede the instance number, e.g. "x_plus_5_i6" meaning "the 7th instance of x_plus_5". In previous projects, names such as "number_list2_base" have been used to mean "the base of the third number list"; as opposed to "number_list_base2", meaning "the second instance of the base of number_list". All in all, such nomenclature became unweildy and ultimately unhelpful except in rare cases where other methods of disambiguation might have been clearer. Hence this rule.

* Where there are multiple types of the same variable, they should terminate in an underscore followed by the type, e.g. x_u32 vs x, where x is in the expected type in light of the circumstances, and x_u32 is a 32-bit unsigned integer. If there are multiple instances of such explicitly typed variables, they can be denoted as: x_u32_0, x_u32_1, etc., which is an exception to the "underscore" rule on terminating variable names with numbers.

* For the purposes of alphabetical ordering "_" must be considered as a space, which means that it should appear before "0".

* Loops involving while() should terminate at the bottom if possible. This may generate less code and operate faster. If doing so would require an encompassing "if", and the code is not in the critical path, than an exception may be made.

* Functions must not verify that their "In" requirements have been met, unless explicitly stated, as this is a waste of code and actually enlarges the security surface due to potential bugs in such verification. Generally, exceptions will only be made in cases in which such requirements would be too complicated to specify in words.

* When a line of code involves a function call, it must involve no math or other function calls other than casting of the input variables (if required) and assigment of the return value (if any).

* When possible, free() should be called in the reverse order relative to malloc() in order to minimize memory map entropy. However, when setting a series of base pointers to NULL during initialization, the usual alphabetical rule should apply.

* It is assumed that no more than (2^61-1) bytes can ever be allocated successfully in a single malloc(), because this is enforced by all allocator functions. This ensures that the number of bits in an allocation will never wrap 64 bits, so we can safely use (u64)s as bit indexes with impunity.

* When a function fails, as indicated by some means documented in the header (for example, returning a nonzero status code), it must preserve all input variables which were passed by reference. Any exceptions to this rule must be documented in that header.

* All numerical constants, except "BUILD" constants in flag files, must be of strictly designated type, e.g. "U" or "ULL", with avoidance of signed types unless absolutely necessary. 

* Where applicable, use the following variable name suffixes: (1) "_idx", meaning the zero-based index (address) of a particular item in a list; (2) "_max", meaning the maximum value of a variable, either which is allowed or which actually occurs; (3) "_count", meaning the number of items in a particular set, usually a list; (4) "_span", meaning one more than the maximum allowed state which a variable could assume, regardless of whether or not it actually does so.

* Casting is necessary when converting types but: (1) avoid aliasing violations and (2) casting to or from (void *) requires no cast.

* All "if" and "while" statements should be configured for the fastest possible short-circuit evaluation.

* Unless otherwise stated, all functions assume that writable regions are disjoint from all other regions. The disjointness, furthermore, must be enforced with a granularity equal to the granularity of the data type in question. So for example, it would be insufficient for the caller to ensure that inputs are bitwise disjoint if they share a common byte, and a base pointer to a writable region is byte-granular.

* "if" clauses must not change any state. Doing so would complicate verification.

* Type char is assumed to have the same size as u8. This seems universal and multiplying by sizeof(char) is a pain.
